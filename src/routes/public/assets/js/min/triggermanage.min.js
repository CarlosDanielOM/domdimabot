localStorage.getItem("token") || (window.location.href = "/"); const channel = window.location.pathname.split("/")[3], fileUploadForm = document.getElementById("fileUploadForm"), createTriggerForm = document.getElementById("createTriggerForm"), alertContainer = document.getElementById("alertContainer"), mediaContainer = document.getElementById("mediaContainer"), fileInput = document.getElementById("file"), fileSelect = document.getElementById("fileSelect"), triggerNameCreate = document.getElementById("triggerNameCreate"), triggerCost = document.getElementById("triggerCost"), uploadFileBtn = document.getElementById("uploadFileBtn"), createTriggerBtn = document.getElementById("createTriggerBtn"); let files, triggers; function createAlert(e, t) { const n = document.createElement("div"), i = document.createElement("p"); n.classList.add("alert", `alert-${t}`), i.innerText = e, n.appendChild(i), alertContainer.appendChild(n), setTimeout((() => { n.remove() }), 5e3) } function createVideoFileView(e) { const t = document.createElement("div"), n = document.createElement("div"), i = document.createElement("div"), r = document.createElement("video"), d = document.createElement("source"); r.style.width = "100%", r.style.height = "100%", t.classList.add("media"), n.classList.add("header"), i.classList.add("content"), d.setAttribute("src", e.fileUrl), d.setAttribute("type", e.fileType), t.id = e._id, n.innerText = e.name, r.appendChild(d), i.appendChild(r), t.appendChild(n), t.appendChild(i), mediaContainer.appendChild(t) } function createImageFileView(e) { const t = document.createElement("div"), n = document.createElement("div"), i = document.createElement("div"), r = document.createElement("img"); r.style.width = "100%", r.style.height = "100%", t.classList.add("media"), n.classList.add("header"), i.classList.add("content"), r.src = e.fileUrl, t.id = e._id, n.innerText = e.name, i.appendChild(r), t.appendChild(n), t.appendChild(i), mediaContainer.appendChild(t) } function populateFileSelect(e) { const t = document.createElement("option"); t.value = e._id, t.innerText = e.name, t.id = `${e._id}-Option`, t.setAttribute("fileType", e.fileType), fileSelect.appendChild(t) } function createTriggerView(e) { const t = document.createElement("div"), n = document.createElement("div"), i = document.createElement("div"), r = document.createElement("div"), d = document.createElement("div"), l = document.createElement("div"), a = document.createElement("div"), o = document.createElement("button"), c = document.createElement("button"); t.classList.add("trigger"), n.classList.add("trigger-header"), i.classList.add("trigger-content"), r.classList.add("trigger-footer"), d.classList.add("trigger-info"), l.classList.add("trigger-actions"), a.classList.add("trigger-actions"), o.classList.add("btn", "btn-warning"), c.classList.add("btn", "btn-danger"), n.innerHTML = `<h2>${e.name}</h2>`, d.innerHTML = `<p>Cost: ${e.cost}</p><p>Type: ${e.type}</p><p>Cooldown: ${e.cooldown}</p>`, o.innerText = "Edit", c.innerText = "Delete", c.id = `${e._id}-delete`, o.id = `${e._id}-edit`, t.id = `${e._id}-trigger`, l.appendChild(o), a.appendChild(c), i.appendChild(d), i.appendChild(l), r.appendChild(a), t.appendChild(n), t.appendChild(i), t.appendChild(r), document.getElementById("triggerContainer").appendChild(t), c.addEventListener("click", (async e => { if (!confirm("Are you sure you want to delete this trigger?")) return; const t = e.target.id.split("-")[0], n = await fetch(`https://domdimabot.com/trigger/delete/${channel}/${t}`, { method: "DELETE" }), i = await n.json(); if (i.error) return createAlert(i.message, "error"); createAlert(i.message, "success"), document.getElementById(`${t}-trigger`).remove() })), o.addEventListener("click", (async e => { })) } uploadFileBtn.addEventListener("click", (async () => { document.getElementById("uploadContainer").style.display = "flex" })), createTriggerBtn.addEventListener("click", (async () => { document.getElementById("createTrigger").style.display = "flex" })), fileUploadForm.addEventListener("submit", (async e => { e.preventDefault(), console.log(fileInput.files[0].size); let t = document.getElementById("triggerName"); if (0 === fileInput.files.length) return createAlert("Please select a file", "error"); if (fileInput.files[0].size > 5e6) return createAlert("File size should not exceed 5MB", "error"); if ("" == t.value) return createAlert("Please enter a valid File Name", "error"); const n = new FormData(fileUploadForm), i = await fetch(`https://domdimabot.com/trigger/upload/${channel}`, { method: "POST", body: n }), r = await i.json(); if (r.error) return createAlert(r.message, "error"); createAlert(r.message, "success"), createVideoFileView(r.file), document.getElementById("uploadContainer").style.display = "none", fileUploadForm.reset() })), createTriggerForm.addEventListener("submit", (async e => { e.preventDefault(); let t = fileSelect.options[fileSelect.selectedIndex].innerText, n = fileSelect.options[fileSelect.selectedIndex].getAttribute("fileType"); const i = { name: document.getElementById("triggerNameCreate").value, file: t, type: document.getElementById("triggerType").value, mediaType: n, cost: document.getElementById("triggerCost").value, prompt: null, fileID: fileSelect.value, cooldown: document.getElementById("triggerCooldown").value }, r = await fetch(`https://domdimabot.com/trigger/create/${channel}`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(i) }), d = await r.json(); if (d.error) return createAlert(d.message, "error"); createTriggerView(d.trigger), createAlert(d.message, "success"), document.getElementById("createTrigger").style.display = "none", createTriggerForm.reset() })), createTriggerForm.addEventListener("change", (e => { 0 != fileSelect.value && "" != triggerNameCreate.value ? (document.getElementById("createSubmitBtn").removeAttribute("disabled"), console.log("enabled")) : (document.getElementById("createSubmitBtn").setAttribute("disabled", !0), console.log("disabled")) })), document.getElementById("exitUpload").addEventListener("click", (() => { document.getElementById("uploadContainer").style.display = "none" })), document.getElementById("exitCreateTrigger").addEventListener("click", (() => { document.getElementById("createTrigger").style.display = "none" })), window.onload = async () => { document.getElementById("triggerRef").setAttribute("href", `/trigger/manage/${channel}`), fileInput.addEventListener("change", (async e => { let t = e.target.files[0]; document.getElementById("submitBtn").disabled = !1; let n = window.URL.createObjectURL(t); document.getElementById("videoPreview").src = n, document.getElementById("videoElement").load(), document.getElementById("fileSize").innerText = `File size: ${(e.target.files[0].size / 1024 / 1024).toFixed(2)} MB` })), files = await fetch(`https://domdimabot.com/trigger/files/${channel}`); const e = await files.json(); files = e.files; for (let e in files) { let t = files[e].fileType.split("/")[0]; "video" == t ? createVideoFileView(files[e]) : "image" == t && createImageFileView(files[e]), populateFileSelect(files[e]) } triggers = await fetch(`https://domdimabot.com/triggers/${channel}`); const t = await triggers.json(); triggers = t.triggers; for (let e in triggers) createTriggerView(triggers[e]) };